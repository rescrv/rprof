#!/usr/bin/env python

# Copyright (c) 2013, Robert Escriva
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of rprof nor the names of its contributors may be used
#       to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement


import argparse
import collections
import errno
import itertools
import os.path
import re
import subprocess
import sys
import time


def collect_trace(profile, pid):
    try:
        gdb = ['gdb', '-ex', 'set pagination 0',
                      '-ex', 'set print demangle off',
                      '-ex', 'print "start another capture"',
                      '-ex', 'thread apply all bt',
                      '-batch', '-p', str(pid)]
        rc = subprocess.call(gdb, stdout=profile, stderr=profile)
        if rc != 0:
            print('rprof: gdb failed; see the log for details', file=sys.stderr)
            return False
        return True
    except OSError as e:
        if e.errno == errno.ENOENT:
            print('rprof: could not find gdb; please install it', file=sys.stderr)
            return False
        raise e


def profile(cmds, profile='profile.{pid}', interval=5):
    try:
        p = subprocess.Popen(cmds)
    except OSError as e:
        print('rprof: could not execute command: ', e, file=sys.stderr)
        return
    params = {'pid': p.pid}
    profile_name = profile.format(**params)
    if os.path.exists(profile_name):
        print('rprof: overwriting %r' % profile_name, file=sys.stderr)
    g = open(profile_name, 'w')
    success = True
    while p.poll() is None:
        if not collect_trace(g, p.pid):
            p.wait()
            success = False
        else:
            time.sleep(interval)
    g.flush()
    g.close()
    if success:
        print('rprof: succeeded; profile at %r' % profile_name, file=sys.stderr)
    else:
        print('rprof: encountered an error; profile is incomplete', file=sys.stderr)


def still_running(pid):
    try:
        os.getpgid(int(pid))
        return True
    except OSError as e:
        if e == errno.ESRCH:
            return False
        raise e


def attach(pid, profile='profile.{pid}', interval=1):
    params = {'pid': pid}
    profile_name = profile.format(**params)
    if os.path.exists(profile_name):
        print('rprof: overwriting %r' % profile_name, file=sys.stderr)
    g = open(profile_name, 'w')
    success = True
    while still_running(pid):
        if not collect_trace(g, pid):
            success = False
        else:
            time.sleep(interval)
    g.flush()
    g.close()
    if success:
        print('rprof: succeeded; profile at %r' % profile_name, file=sys.stderr)
    else:
        print('rprof: encountered an error; profile is incomplete', file=sys.stderr)


trace_re = re.compile(r'^\$1 = "start another capture"$')
thread_re = re.compile(r'^Thread [0-9]+ \(Thread 0x[0-9a-f]+ \(LWP ([0-9]+)\)\):$')
frame1_re = re.compile(r'^#[0-9]+\s+0x[0-9a-f]+\s+in\s+(.+?) \(.*\) (?:from|at) .+?$')
frame2_re = re.compile(r'^#\d+\s+0x[0-9a-f]+\s+in\s+(.+?) \(.*\)$')
frame3_re = re.compile(r'^#[0-9]+\s+(.+?) \(.*\) (?:from|at) .+?$')
skip1_re = re.compile(r'^$')
skip2_re = re.compile(r'^Using host .+? library "[^"]*".$')
skip3_re = re.compile(r'^\[Thread debugging using .+? enabled\]$')
skip4_re = re.compile(r'^\[New Thread 0x[0-9a-f]+ \(LWP [0-9]+\)\]$')
skip5_re = re.compile(r'^.+?\s+\(.*\) (?:from|at) .+?$')
skip6_re = re.compile(r'^warning: no loadable sections found in added symbol-file system-supplied DSO at 0x[0-9a-f]+$')
skip7_re = re.compile(r'^.+?: No such file or directory.$')


Stack = collections.namedtuple('Stack', ('thread', 'frames'))


def generate_stack_ids(traces):
    ids = {}
    counter = 0
    for t in traces:
        for s in t:
            if s.frames not in ids:
                ids[s.frames] = counter
                counter += 1
    return ids, dict([(v, k) for k, v in ids.iteritems()])


def filter_traces(traces, frames):
    ret = []
    for t in traces:
        for s in t:
            if frames == s.frames:
                ret.append(t)
                break
    return ret


def generate_histogram(traces):
    stacks = [s for s in itertools.chain(*traces)]
    frames = [s.frames for s in stacks]
    counts = [(c, f) for f, c in collections.Counter(frames).iteritems()]
    counts.sort()
    return counts


def generate_cumulative_counts(counts):
    if not len(counts):
        return counts
    def sort_key(x):
        count, frames = x
        return 0 - len(frames)
    counts.sort(key=sort_key)
    frame_length = len(counts[0][1])
    cumulative_counts = collections.defaultdict(int)
    for c in counts:
        count, frames = c
        assert frame_length >= len(frames)
        frame_length = len(frames)
        while len(frames) > 0:
            cumulative_counts[frames] += count
            frames = frames[1:]
    counts = [(v, k) for k, v in cumulative_counts.iteritems()]
    counts.sort()
    return counts


def annotate(args):
    parser = argparse.ArgumentParser(prog='rprof annotate')
    parser.add_argument('profile', help='output of rprof profile', type=str)
    parser.add_argument('--context', type=int, default=None)
    parser.add_argument('--cumulative', action='store_const', const=True, default=False)
    args = parser.parse_args(args)
    f = open(args.profile)
    traces = []
    trace = []
    stack = None
    addrs = []
    for line in f:
        line = line.strip()
        match = trace_re.match(line)
        if match:
            if stack is not None:
                trace.append(Stack(stack, tuple(addrs)))
            if trace:
                traces.append(tuple(trace))
            trace = []
            stack = None
            addrs = []
            continue
        match = thread_re.match(line)
        if match:
            if stack is not None:
                trace.append(Stack(stack, tuple(addrs)))
            stack = match.groups()[0]
            addrs = []
            continue
        # Parse stack frames
        match = None
        if match is None: match = frame1_re.match(line)
        if match is None: match = frame2_re.match(line)
        if match is None: match = frame3_re.match(line)
        if match:
            assert(len(match.groups()) > 0)
            addrs.append(match.groups()[0])
            continue
        # Skip information we don't care about
        if skip1_re.match(line): continue;
        if skip2_re.match(line): continue;
        if skip3_re.match(line): continue;
        if skip4_re.match(line): continue;
        if skip5_re.match(line): continue;
        if skip6_re.match(line): continue;
        if skip7_re.match(line): continue;
        print('rprof: unhandled output from gdb: %r' % line, file=sys.stderr)
    if stack is not None:
        trace.append(Stack(stack, tuple(addrs)))
    if trace:
        traces.append(tuple(trace))
    forward_ids, reverse_ids = generate_stack_ids(traces)
    if args.context is not None:
        traces = filter_traces(traces, reverse_ids[args.context])
    counts = generate_histogram(traces)
    if args.cumulative:
        counts = generate_cumulative_counts(counts)
    print(counts[0:2])
    histwidth = len(str(counts[-1][0])) if counts else 0
    blankline = False
    for count, frames in counts:
        if blankline:
            print()
        blankline = True
        per_thread = [s.thread for s in itertools.chain(*traces) if s.frames == frames]
        per_thread = ', '.join(['{0}: {1}'.format(*x) for x in
                                sorted(collections.Counter(per_thread).iteritems())])
        print('{0:{1}}  id = {2} | threads = {3}'.format(count, histwidth, forward_ids.get(frames, 'c'), per_thread))
        fwidth = len(str(len(frames) - 1))
        for i, f in enumerate(frames):
            f = f.decode('ascii', errors='ignore')
            print('{0}  #{1:0{2}} {3}'.format(' ' * histwidth, i, fwidth, f))


if __name__ == '__main__':
    args = sys.argv[1:]
    assert(args)
    assert(args[0] in ('profile', 'attach', 'analyze'))
    if args[0] == 'profile':
        profile(args[1:])
    if args[0] == 'attach':
        attach(args[1])
    if args[0] == 'analyze':
        annotate(args[1:])
